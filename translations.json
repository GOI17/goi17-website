{
  "en": {
    "title": "Full-Stack Developer & Tech Enthusiast",
    "nav_home": "Home",
    "nav_projects": "Projects",
    "nav_blog": "Blog",
    "nav_twitch": "Twitch",
    "welcome": "Welcome to my digital space where code meets creativity. Explore innovative projects, dive into technical insights, and discover the passion behind modern web development.",
    "projects_heading": "Projects",
    "blog_heading": "Blog",
    "twitch_heading": "Twitch",
    "twitch_text1": "Check out my live streams and past broadcasts on Twitch.",
    "twitch_link_text": "https://www.twitch.tv/unbootuichero",
    "footer_text": "© 2025 Gilberto Olivas",
    "blog_rendering_strategies_frontend_title": "Rendering Strategies for Frontend: When and Why You Should Learn Them",
    "blog_rendering_strategies_frontend_excerpt": "Master the different rendering strategies (SSR, SSG, CSR, ISR) to build faster, more SEO-friendly web applications. Learn when to use each approach and why understanding them is crucial for modern frontend development.",
    "blog_carets_semantic_versioning_title": "Understanding Carets (^) in Node.js: Why Semantic Versioning Matters",
    "blog_carets_semantic_versioning_excerpt": "Learn why understanding the caret (^) symbol in package.json is crucial for Node.js developers. Discover how semantic versioning and caret ranges can prevent breaking changes and ensure project stability.",
    "blog_react_context_vs_redux_title": "Why you should not compare React Context with Redux/Redux-toolkit?",
    "blog_react_context_vs_redux_excerpt": "React Context and Redux serve different purposes. While Context is great for simple, component‑local state, Redux offers a robust, predictable store with middleware, dev‑tools, and a large ecosystem. Comparing them is like comparing a pocket‑knife to a full‑sized toolbox.",
    "blog_docker_nix_title": "Docker is OK, but if you want to go further you should consider Nix",
    "blog_docker_nix_excerpt": "Docker has become the de‑facto standard for containerization, but it has limitations in reproducibility, declarative configuration, and multi‑platform builds. Nix, a purely functional package manager, offers a different approach that can address many of Docker’s pain points.",
    "read_more": "Read more"
  },
  "es": {
    "title": "Desarrollador Full-Stack & Entusiasta de la Tecnología",
    "nav_home": "Inicio",
    "nav_projects": "Proyectos",
    "nav_blog": "Blog",
    "nav_twitch": "Twitch",
    "welcome": "Bienvenido a mi espacio digital donde el código se encuentra con la creatividad. Explora proyectos innovadores, sumérgete en conocimientos técnicos y descubre la pasión detrás del desarrollo web moderno.",
    "projects_heading": "Proyectos",
    "blog_heading": "Blog",
    "twitch_heading": "Twitch",
    "twitch_text1": "Mira mis transmisiones en vivo y transmisiones pasadas en Twitch.",
    "twitch_link_text": "https://www.twitch.tv/unbootuichero",
    "footer_text": "© 2025 Gilberto Olivas",
    "blog_rendering_strategies_frontend_title": "Estrategias de Renderizado para Frontend: Cuándo y Por Qué Deberías Aprenderlas",
    "blog_rendering_strategies_frontend_excerpt": "Domina las diferentes estrategias de renderizado (SSR, SSG, CSR, ISR) para construir aplicaciones web más rápidas y amigables con SEO. Aprende cuándo usar cada enfoque y por qué entenderlas es crucial para el desarrollo frontend moderno.",
    "blog_carets_semantic_versioning_title": "Entendiendo los Carets (^) en Node.js: Por qué importa el Versionado Semántico",
    "blog_carets_semantic_versioning_excerpt": "Aprende por qué entender el símbolo caret (^) en package.json es crucial para desarrolladores de Node.js. Descubre cómo el versionado semántico y los rangos de caret pueden prevenir cambios disruptivos y asegurar la estabilidad del proyecto.",
    "blog_react_context_vs_redux_title": "¿Por qué no deberías comparar React Context con Redux/Redux-toolkit?",
    "blog_react_context_vs_redux_excerpt": "React Context y Redux tienen propósitos diferentes. Mientras que Context es excelente para estados simples y locales a componentes, Redux ofrece una tienda robusta y predecible con middleware, dev‑tools y un gran ecosistema. Compararlos es como comparar un cuchillo de bolsillo con una caja de herramientas completa.",
    "blog_react_context_vs_redux_title": "¿Por qué no deberías comparar React Context con Redux/Redux-toolkit?",
    "blog_docker_nix_title": "Docker está bien, pero si quieres ir más allá deberías considerar Nix",
    "blog_docker_nix_excerpt": "Docker se ha convertido en el estándar de facto para la contenedorización, pero tiene limitaciones en reproducibilidad, configuración declarativa y compilaciones multiplataforma. Nix, un gestor de paquetes puramente funcional, ofrece un enfoque diferente que puede abordar muchos de los puntos débiles de Docker.",
    "blog_docker_nix_title": "Docker está bien, pero si quieres ir más allá deberías considerar Nix",
    "read_more": "Leer más"
  }
}
